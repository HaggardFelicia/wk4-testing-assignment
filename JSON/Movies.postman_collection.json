{
	"info": {
		"_postman_id": "10a2a3f7-5f5d-4071-b00a-7e0b9eac5090",
		"name": "Movies",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32790837"
	},
	"item": [
		{
			"name": "Directors",
			"item": [
				{
					"name": "Get All Directors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is either 200 or 201\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Testing Directors has all the required Information\", ()=>{\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.name).to.be.not.null;\r",
									"    pm.expect(responseJson.age).to.be.not.null;\r",
									"    pm.expect(responseJson.email).to.be.not.null;\r",
									"    pm.expect(responseJson.biography).to.be.not.null;\r",
									"    pm.expect(responseJson.id).to.be.not.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Testing return data\", function(){\r",
									"    const [directorObject] = pm.response.json().data;\r",
									"    pm.expect(directorObject).to.have.property(\"_id\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:5000/api/v1/directors",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"directors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Director By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is either 200 or 201\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Testing Directors has all the required Information\", ()=>{\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.name).to.be.not.null;\r",
									"    pm.expect(responseJson.age).to.be.not.null;\r",
									"    pm.expect(responseJson.email).to.be.not.null;\r",
									"    pm.expect(responseJson.biography).to.be.not.null;\r",
									"    pm.expect(responseJson.id).to.be.not.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:5001/api/v1/directors/65dad91049a7848137b7d86f",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"v1",
								"directors",
								"65dad91049a7848137b7d86f"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Director",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is either 200 or 201\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Testing Directors has all the required Information\", ()=>{\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.name).to.be.not.null;\r",
									"    pm.expect(responseJson.age).to.be.not.null;\r",
									"    pm.expect(responseJson.email).to.be.not.null;\r",
									"    pm.expect(responseJson.biography).to.be.not.null;\r",
									"    pm.expect(responseJson.id).to.be.not.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"director\":{\r\n        \"name\":\"Robert Zemeckis\",\r\n        \"age\": \"71\",\r\n        \"email\": \"rzemeckis@gmail.com\",\r\n        \"biography\": \"A whiz-kid with special effects, Robert is from the Spielberg camp of film-making (Steven Spielberg produced many of his films). Usually working with writing partner Bob Gale, Robert's earlier films show he has a talent for zany comedy (Romancing the Stone (1984), 1941 (1979)) and special effect vehicles (Who Framed Roger Rabbit (1988) and Back to the Future (1985)). \"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:5000/api/v1/directors/",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"directors",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Director",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is either 200 or 201\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Testing Directors has all the required Information\", ()=>{\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.name).to.be.not.null;\r",
									"    pm.expect(responseJson.age).to.be.not.null;\r",
									"    pm.expect(responseJson.email).to.be.not.null;\r",
									"    pm.expect(responseJson.biography).to.be.not.null;\r",
									"    pm.expect(responseJson.id).to.be.not.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"gender\" : \"Female\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:5000/api/v1/directors/65dad41a49a7848137b7d85c",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"directors",
								"65dad41a49a7848137b7d85c"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is either 200 or 201\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Testing Directors has all the required Information\", ()=>{\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.name).to.be.undefined;\r",
									"    pm.expect(responseJson.age).to.be.undefined;\r",
									"    pm.expect(responseJson.email).to.be.undefined;\r",
									"    pm.expect(responseJson.biography).to.be.undefined;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:5000/api/v1/directors/65d3c818108f5b19a9227ade",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"directors",
								"65d3c818108f5b19a9227ade"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Movies",
			"item": [
				{
					"name": "Get All Movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is either 200 or 201\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Testing that the data is there\",()=>{\r",
									"\tconst [directorObject] = pm.response.json().data;\r",
									"    pm.expect(directorObject).to.have.property(\"_id\");\r",
									"\tpm.expect(directorObject).to.have.property(\"title\").that.is.not.null;\r",
									"\tpm.expect(directorObject).to.have.property(\"genre\").that.is.not.null;\r",
									"\tpm.expect(directorObject).to.have.property(\"director\").that.is.not.null;\r",
									"\tpm.expect(directorObject).to.have.property(\"year\").that.is.not.null;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:5000/api/v1/movies/",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"movies",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Movie By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is either 200 or 201\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Testing that the data is there\",()=>{\r",
									"\tconst directorObject = pm.response.json().data;\r",
									"    pm.expect(directorObject).to.have.property(\"_id\");\r",
									"\tpm.expect(directorObject).to.have.property(\"title\").that.is.not.null;\r",
									"\tpm.expect(directorObject).to.have.property(\"genre\").that.is.not.null;\r",
									"\tpm.expect(directorObject).to.have.property(\"director\").that.is.not.null;\r",
									"\tpm.expect(directorObject).to.have.property(\"year\").that.is.not.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:5000/api/v1/movies/65e30fe67b203894533147b0",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"movies",
								"65e30fe67b203894533147b0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is either 200 or 201\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Testing that the data is there\",()=>{\r",
									"\tconst directorObject = pm.response.json().data;\r",
									"\tpm.expect(directorObject).to.have.property(\"title\").that.is.not.null;\r",
									"\tpm.expect(directorObject).to.have.property(\"genre\").that.is.not.null;\r",
									"\tpm.expect(directorObject).to.have.property(\"director\").that.is.not.null;\r",
									"\tpm.expect(directorObject).to.have.property(\"year\").that.is.not.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"movie\":{\r\n        \"title\": \"Dumbo\",\r\n        \"genre\": \"Adventure\",\r\n        \"director\": \"65dace9e49a7848137b7d83b\",\r\n        \"year\": \"2019\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:5000/api/v1/movies/",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"movies",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is either 200 or 201\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Testing that the data is there\",()=>{\r",
									"\tconst directorObject = pm.response.json().data;\r",
									"    pm.expect(directorObject).to.have.property(\"_id\");\r",
									"\tpm.expect(directorObject).to.have.property(\"title\").that.is.not.null;\r",
									"\tpm.expect(directorObject).to.have.property(\"genre\").that.is.not.null;\r",
									"\tpm.expect(directorObject).to.have.property(\"director\").that.is.not.null;\r",
									"\tpm.expect(directorObject).to.have.property(\"year\").that.is.not.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"genre\":\"Family\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:5000/api/v1/movies/65e3d8aa28e5e9ad74dce876",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"movies",
								"65e3d8aa28e5e9ad74dce876"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is either 200 or 201\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Testing that the data is there\",()=>{\r",
									"\tconst directorObject = pm.response.json().data;\r",
									"    pm.expect(directorObject).to.have.property(\"_id\");\r",
									"\tpm.expect(directorObject).to.have.property(\"title\").that.is.not.null;\r",
									"\tpm.expect(directorObject).to.have.property(\"genre\").that.is.not.null;\r",
									"\tpm.expect(directorObject).to.have.property(\"director\").that.is.not.null;\r",
									"\tpm.expect(directorObject).to.have.property(\"year\").that.is.not.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:5000/api/v1/movies/65e30fe67b203894533147b0",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"movies",
								"65e30fe67b203894533147b0"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DirectorQuerys",
			"item": [
				{
					"name": "2 Queries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is either 200 or 201', () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        200,\r",
									"        201\r",
									"    ]);\r",
									"})\r",
									"\r",
									"pm.test('Response time is less than 50ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(50);\r",
									"})\r",
									"\r",
									"pm.test('Testing that the data is there', function () {\r",
									"    const [directorObject] = pm.response.json().data;\r",
									"    pm.expect(directorObject).to.have.property('_id');\r",
									"    pm.expect(directorObject).to.have.property('name');\r",
									"    pm.expect(directorObject).to.have.property('age');\r",
									"    pm.expect(directorObject).to.have.property('email');\r",
									"    pm.expect(directorObject).to.have.property('biography');\r",
									"    pm.expect(directorObject).to.have.property('gender');\r",
									"})\r",
									"\r",
									"pm.test(\"Testing the lte\", function(){\r",
									"    console.log(\"all directors\", pm.response.json().data);\r",
									"    const [directorObject]= pm.response.json().data;\r",
									"    console.log(\"directorObject being tested for lte\", directorObject);\r",
									"    const age = directorObject.age;\r",
									"    pm.expect(age).to.be.lte(50);\r",
									"});\r",
									"\r",
									"pm.test(\"Testing if the gender\", function () {\r",
									"     const [directorObject] = pm.response.json().data;\r",
									"     const gender = directorObject.gender;\r",
									"     pm.expect(gender).to.eql(\"Female\");\r",
									"     console.log(\"directorObject being tested for gender\", directorObject);\r",
									"     console.log(gender);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:5000/api/v1/directors?age[lte]=50&gender=Female",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"directors"
							],
							"query": [
								{
									"key": "age[lte]",
									"value": "50"
								},
								{
									"key": "gender",
									"value": "Female"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exclude",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is either 200 or 201\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 50ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(50);\r",
									"});\r",
									"\r",
									"pm.test(\"Testing that the email and biography is excluded\", function(){\r",
									"    const [directorObject] = pm.response.json().data;\r",
									"    pm.expect(directorObject).to.not.have.property(\"email\");\r",
									"    pm.expect(directorObject).to.not.have.property(\"biography\");\r",
									"});\r",
									"\r",
									"pm.test(\"Testing that the name,age,and gender are included\", function(){\r",
									"    const [directorObject] = pm.response.json().data;\r",
									"    pm.expect(directorObject).to.have.property(\"_id\");\r",
									"    pm.expect(directorObject).to.have.property(\"name\");\r",
									"    pm.expect(directorObject).to.have.property(\"age\");\r",
									"    pm.expect(directorObject).to.have.property(\"gender\");\r",
									"});\r",
									"\r",
									"pm.test(\"Testing Pagination\", function(){\r",
									"    const [directorObject] = pm.response.json().data;\r",
									"    console.log(directorObject);\r",
									"    pm.expect([directorObject]).to.have.lengthOf(5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:5000/api/v1/directors?select= name,gender,age&page=3&limit=5",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"directors"
							],
							"query": [
								{
									"key": "select",
									"value": " name,gender,age"
								},
								{
									"key": "page",
									"value": "3"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is either 200 or 201\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 50ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(50);\r",
									"});\r",
									"\r",
									"pm.test(\"Testing that the data is there\", function(){\r",
									"    const [directorObject] = pm.response.json().data;\r",
									"    pm.expect(directorObject).to.have.property(\"_id\");\r",
									"    pm.expect(directorObject).to.have.property(\"name\");\r",
									"    pm.expect(directorObject).to.have.property(\"age\");\r",
									"    pm.expect(directorObject).to.have.property(\"email\");\r",
									"    pm.expect(directorObject).to.have.property(\"biography\");\r",
									"    pm.expect(directorObject).to.have.property(\"gender\");\r",
									"});\r",
									"\r",
									"pm.test(\"Testing Pagination\", function(){\r",
									"    const [directorObject] = pm.response.json().data;\r",
									"    console.log(directorObject);\r",
									"    pm.expect([directorObject]).to.have.lengthOf(5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:5000/api/v1/directors?sort=name&page=2&limit=5",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"directors"
							],
							"query": [
								{
									"key": "sort",
									"value": "name"
								},
								{
									"key": "page",
									"value": "2"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Testing Pagination\", function(){\r",
									"    const [directorObject] = pm.response.json().data;\r",
									"    console.log(directorObject);\r",
									"    pm.expect([directorObject]).to.have.lengthOf(4);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:5000/api/v1/directors?select=name&page=1&limit=5",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"directors"
							],
							"query": [
								{
									"key": "select",
									"value": "name"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}